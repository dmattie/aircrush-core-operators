#!/usr/bin/env python


from aircrushcore.controller.configuration import AircrushConfig
from aircrushcore.dag import Workload
from aircrushcore.cms.models import *
from os.path import exists,dirname
import os
import importlib
import getpass

crush_config='crush.ini'
aircrush=AircrushConfig(crush_config)

crush_host=Host(
    endpoint=aircrush.config['REST']['endpoint'],
    username=aircrush.config['REST']['username'],
    password=aircrush.config['REST']['password']
    )

def ready():
    #Sense readiness to do something
    return True

def getOperatorClassDefinition(task_uuid:str):
    
    #This function uses the task uuid to load the associated operator module 
    #and return a class defintion

    task = TaskCollection(cms_host=crush_host).get_one(task_uuid) #fetch task definition
    operator=task.field_operator #identify the operator to execute
    module=f"{task.field_operator}_operator" #build filename for dynamic load
    operator_module=importlib.import_module(f"operators.{module}")  #dynamically import identified operator
    op_class=getattr(operator_module,operator) #get class defintion    
    return op_class

def getMyComputeNodeUUID():

    cluster=aircrush.config['COMPUTE']['cluster']
    account=aircrush.config['COMPUTE']['account']
    working_dir=aircrush.config['COMPUTE']['working_directory'] #os.environ.get("SCRATCH")
    username=getpass.getuser()

    metadata={
        "title":f"{cluster}/{username}",
        "field_host":cluster,
        "field_username":username,
        "field_password":"",
        "field_working_directory":working_dir,        
        "cms_host":crush_host        
    }

    cn_col = ComputeNodeCollection(cms_host=crush_host)
    matching_cn = cn_col.get(filter=f"&filter[field_username][value]={username}&filter[field_host][value]={cluster}")

    for match in matching_cn:          
        metadata['uuid']=match
        break

    n = ComputeNode(metadata=metadata)
    nuid=n.upsert()
    
    return nuid



def doSomething():
    
    nuid = getMyComputeNodeUUID()
    
    
    w=Workload(aircrush) #The list of things to do
    todo = w.get_next_task(node_uuid=nuid) #Do whatever the big brain tells us to do next
    if(todo):  #Todo is a TaskInstance        
        print("-----------------------")        
        op_class = getOperatorClassDefinition(todo.field_task) #use the task UUID to determine which operator to use    
        op = op_class(id=todo.uuid,cms_host=crush_host) #instantiate it based on task instance    
        op.execute(aircrush)  #Let's do this!
    else:
        print("Nothing to do.")

if ready():
    doSomething()